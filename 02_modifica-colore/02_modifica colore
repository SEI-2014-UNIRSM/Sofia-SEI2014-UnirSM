//modifica di P_1_2_3_01 su colore.
//prova per corso di SEI
//obiettivo dell'esercizio Ã¨ creare una palette di colori che possa anche diventare una texture

import generativedesign.*;
import processing.pdf.*;
import java.util.Calendar;

boolean savePDF = false;

int tileCountX = 60; //modifica al codice
int tileCountY = 60; //modifica al codice

// arrays for color components values
int[] redValues = new int[tileCountX]; //modifica al codice
int[] greenValues = new int[tileCountX]; //modifica al codice
int[] blueValues = new int[tileCountX]; //modifica al codice


void setup() { 
  size(800,800); 
  colorMode(RGB,255,255,255,100); //modifica al codice colore
  noStroke();

  // init with random values
  for (int i=0; i<tileCountX; i++) {
    redValues[i] = (int) random(0,255); //modifica al codice
    greenValues[i] = (int) random(0,255); //modifica al codice
    blueValues[i] = (int) random(0,255); //modifica al codice
  }
} 


void draw() { 
  if (savePDF) {
    beginRecord(PDF, timestamp()+".pdf");
    noStroke();
    colorMode(RGB,255,255,255,100); //modifica al codice
  } 
  // white back
  background(0,0,100);

  // count every tile
  int counter = 0;

  // map mouse to grid resolution
  int currentTileCountX = (int) map(mouseX, 0,width, 1,tileCountX);
  int currentTileCountY = (int) map(mouseY, 0,height, 1,tileCountY);
  float tileWidth = width / (float) currentTileCountX;
  float tileHeight = height / (float) currentTileCountY;

  for (int gridY=0; gridY< tileCountY; gridY++) {
    for (int gridX=0; gridX< tileCountX; gridX++) {  
      float posX = tileWidth*gridX;
      float posY = tileHeight*gridY;
      int index = counter % currentTileCountX;

      // get component color values
      fill(redValues[index],greenValues[index],blueValues[index]); //modifica al codice
      rect(posX, posY, tileWidth, tileHeight);
      counter++;
    }
  }

  if (savePDF) {
    savePDF = false;
    endRecord();
  }
} 


void keyReleased() {  
  if (key == 's' || key == 'S') saveFrame(timestamp()+"_##.png");
  if (key == 'p' || key == 'P') savePDF = true;
  if (key == 'c' || key == 'C') {
    // ------ save an ase file (adobe swatch export) ------
    // create palette
    color[] colors = new color[redValues.length];
    for (int i=0; i<redValues.length; i++) {
      colors[i] = color(redValues[i],greenValues[i],blueValues[i]);
    }
    GenerativeDesign.saveASE(this, colors, timestamp()+".ase");
  }

  if (key == '1') {
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = (int) random(0,255); //modifica al codice
      greenValues[i] = (int) random(0,255);//modifica al codice
      blueValues[i] = (int) random(0,255);//modifica al codice
    }
  }
  if (key == '2') { 
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = (int) random(0,255);//modifica al codice
      greenValues[i] = (int) random(0,255);//modifica al codice
      blueValues[i] = 255;//modifica al codice
    }
  }
  if (key == '3') {  
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = (int) random(0,255);//modifica al codice
      greenValues[i] = 100;//modifica al codice
      blueValues[i] = (int) random(0,255);//modifica al codice
    }
  } 

  if (key == '4') {  
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = 0;//modifica al codice
      greenValues[i] = 0;//modifica al codice
      blueValues[i] = (int) random(0,255);//modifica al codice
    }
  }
  if (key == '5') {  
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = 195;//modifica al codice
      greenValues[i] = 100;//modifica al codice
      blueValues[i] = (int) random(0,255);//modifica al codice
    }
  }
  if (key == '6') {  
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = 195;//modifica al codice
      greenValues[i] = (int) random(0,255);//modifica al codice
      blueValues[i] = 100;//modifica al codice
    }
  }

  if (key == '7') {  
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = (int) random(0,180);//modifica ai valori
      greenValues[i] = (int) random(80,255);//modifica ail valori
      blueValues[i] = (int) random(50,90);//modifica ail valori
    }
  }
  if (key == '8') {  
    for (int i=0; i<tileCountX; i++) {
      redValues[i] = (int) random(180,255);//modifica ail valori
      greenValues[i] = (int) random(80,100);//modifica ail valori
      blueValues[i] = (int) random(50,90);//modifica ail valori
    }
  }

  if (key == '9') {
    for (int i=0; i<tileCountX; i++) {
      if (i%2 == 0) {
        redValues[i] = (int) random(0,255);//modifica ail valori
        greenValues[i] = 100;//modifica ail valori
        blueValues[i] = (int) random(0,100);//modifica ail valori
      } 
      else {
        redValues[i] = 195;//modifica ail valori
        greenValues[i] = (int) random(0,100);//modifica ail valori
        blueValues[i] = 100;
      }//modifica ail valori
    }
  }
  if (key == '0') {  
    for (int i=0; i<tileCountX; i++) {
      if (i%2 == 0) {
        redValues[i] = (int) 192;//modifica ail valori
        greenValues[i] = (int) random(0,100);//modifica ail valori
        blueValues[i] = (int) random(10,100);//modifica ail valori
      } 
      else {
        redValues[i] = 273;
       greenValues[i] = (int) random(0,100);//modifica ail valori
        blueValues[i] = (int) random(10,90);//modifica ail valori
      }
    }
  }

}


// timestamp
String timestamp() {
  Calendar now = Calendar.getInstance();
  return String.format("%1$ty%1$tm%1$td_%1$tH%1$tM%1$tS", now);
}

