/ho pensato di aggiungere un'altra classe, per riuscire a separare i pennelli e il loro colore, in modo tale che, cambiando
//pennello, non si applichino i valori a ciò che è stato precedentemente disegnato. Processing segnala un errore di codice,
//non riconoscendo la classe "Pulsa1".


boolean recordPDF = false;
int Pulsazionimassimo = 5000; //numero massimo di pulsazioni per classe pennello rosso
int Pulsazionimassimo1 = 5000; //numero massimo di pulsazioni per la classe pennello verde
int numPulsazioni= 0; //numero di pulsazioni all'avvio del ciclo draw, per il pennello rosso
int numPulsazioni1= 0; //numero di pulsazioni all'avvio del ciclo draw, per il pennello verde
//color Erase= color (200);
boolean isDeleting = false; //variabile di tipo vero/falso: sta cancellando
Pulsa pulsazioni [] = new Pulsa[Pulsazionimassimo]; //pennello rosso
Pulsa1 pulsazioni1 [] = new Pulsa1[Pulsazionimassimo1]; //pennello verde

void setup(){
size(1280,720, P2D);
frameRate(20);
smooth();
noStroke();
}

void draw() {
background(188,209,36);
for (int i=0; i<numPulsazioni; i++){
  pulsazioni[i].draw();
}

for (int i=0; i<numPulsazioni1; i++){
  pulsazioni1[i].draw();
}
/* per cancellare, ma non funziona
  if (isDeleting) { //se cancello premendo "C"
    fill(188,209,36);
    noStroke();
    ellipse(mouseX, mouseY, 30, 30); //dimensioni pennello
    fill(188,209,36);
}
*/

}

//saveframe
//saveFrame("Animazione01/ani-####.png");
//}

/*void mousePressed(){
 nuovoPulsazione(mouseX,mouseY);
  }
  */
  
//a mouse premuto, si crea un elemento della seconda classe (pennello verde)
void mousePressed(){
nuovoPulsazione1(mouseX,mouseY);
}

//a mouse trascinato, si crea un elemento della prima classe (pennello rosso)
void mouseDragged(){
nuovoPulsazione(mouseX,mouseY);
}

void keyPressed(){
if (key==32) {
numPulsazioni=0;
}

 /*if (key == 'C' || key == 'c') {
    isDeleting = !isDeleting;
  }
  */
}

void nuovoPulsazione(int nuovoX, int nuovoY) {
  if (numPulsazioni<Pulsazionimassimo) {
    pulsazioni[numPulsazioni]= new Pulsa(nuovoX, nuovoY);
    numPulsazioni++;
  }}
    
void nuovoPulsazione1(int nuovo1X, int nuovo1Y) {
  if (numPulsazioni1<Pulsazionimassimo1) {
    pulsazioni1[numPulsazioni1]= new Pulsa1(nuovo1X, nuovo1Y);
    numPulsazioni1++;
  }
}

//salvare pdf
void keyReleased(){
  if (key =='r' || key =='R') {
    if (recordPDF == false) {
      beginRecord(PDF, "####.pdf");
      println("recording started");
      recordPDF = true;
    }
  }
  else if (key == 'e' || key =='E') {
    if (recordPDF) {
      println("recording stopped");
      endRecord();
      recordPDF = false;
    }
  }
}

//dichiarazione della prima classe (pennello rosso)
class Pulsa{
  
  float SCALA = random(5,20);
  int x;
  int y;
  float d;
  
  Pulsa(int pulsaX, int pulsaY){
    x= pulsaX;
    y= pulsaY;
    d=0;
  }

//dichiarazione della seconda classe (pennello verde)
  class Pulsa1{
  
  float SCALA = random(5,20);
  int x;
  int y;
  float d;
  
  Pulsa1(int pulsa1X, int pulsa1Y){
    x= pulsa1X;
    y= pulsa1Y;
    d=0;
  }
  
  void draw(){
    if (key=='n'){
      fill(random(200,255),random(0,10),random(0,10),random(100,255));
    ellipse(x, y, d/2+SCALA+random(1,20), d/2+SCALA+random(1,20));
    d += random(0.5);
  }
  else if (key=='m'){
   stroke(Erase);
   line (mouseX,mouseY,pmouseX,pmouseY);
  }
}
}

}
